= stylesheet_link_tag 'network'

:plain 
  <canvas id="canvas" width="3600px" height="2400px"></canvas>

.info_bar
  .links
    = link_to 'New Test', "#new_scenario", :id => "inline", :class => "new_scenario_form"
    = link_to 'Tests', scenarios_path
    = link_to 'Tags', tags_path
    .plain
      <a href='#' style='display:none' id='randomize'>Randomly Arrange Items</a>

  .app_info
    Feature-Girl
  .scenario_info
    .title
      Title:
      %span.title edit a post
    .tags_info
      Tags:
      %span.tags
        = link_to "@posts", '#'
    .steps
      Click on a Test or FeatureTag to view details!
  .tag_info
    .title
    .description
    .scenarios

.scenarios
  - @scenarios.each do |scenario|
    .scenario_object{ :id => "scenario_#{scenario.id}", :style => "left: #{scenario.left}px; top: #{scenario.top}px; position: absolute;" }
      .modify_bar
        .delete
          = link_to image_tag('/images/delete.gif', :width => '10px', :height => '10px'), scenario_path(scenario), :method => :delete
        .edit
          = link_to image_tag('/images/edit.png', :width => '15px', :height => '10px'), edit_scenario_path(scenario)
      .info
        = scenario.title
        .scenario_portal{ :id => "scenario_portal_#{scenario.id}", :style => "display:none;" }
          = image_tag('/images/orange_portal.jpg')
          .scenario_portal_tag{ :id => "scenario_portal_tag_#{scenario.id}", :style => "display:none;" }
            none
      .hidden_info
        .steps{ :id => "scenario_#{scenario.id}_steps", :style => "display:none;" }
          = raw '<p>' + (h scenario.steps).gsub(/(Given|When|Then|And)/, '<font color=green>\1</font>').gsub(/"([^"]*)"/, '<font color=blue>"\1"</font>').split('\n').join('</p><p>') + '</p>'
        .tags
          - scenario.tags.each do |tag|
            = link_to tag.name, tag_path(tag)

.tags
  - @tags.each_with_index do |tag, index|
    .tag_object{ :id => "tag_#{tag.id}", :style => "left: #{tag.left}px; top: #{tag.top}px; background-color: #{get_unique_color(@tags.count,index)}; position:absolute;" }
      = tag.name
      .tag_portal{ :id => "tag_portal_#{tag.id}" }
        = image_tag('/images/blue_portal.jpg')



.inline_content{ :style => 'display:none' }
  .new_scenario_form
    = render :partial => 'scenarios/form'

 
-#%ul.features
  %li= link_to 'Show', scenario
  %li= link_to 'Edit', edit_scenario_path(scenario)
  %li= button_to 'Destroy', scenario_path(scenario),  :confirm => 'Are you sure?', :method => :delete

:javascript 
  var s = 0;
  var s2 = 0;
  function printtime(){ var d = new Date();
  s2 = d.getTime() * 1000 + d.getMilliseconds();
  //console.log(s2-s);
  s = s2;
  }



  var canvas = $('#canvas')[0]
  var ctx = canvas.getContext('2d');
  var connections = [ #{@scenarios.collect { |s| s.tags.collect { |t| "{ from: '#scenario_" + s.id.to_s + "', to: '#tag_" + t.id.to_s + "' }" } }.join(', ') } ];

  function connect(scen, tag) { 
    scen = $(scen);
    tag = $(tag);
    ctx.strokeStyle = tag.css('border-left-color');
    ctx.lineWidth = 3;
    ctx.beginPath();
    ctx.moveTo(scen.offset().left + scen.width()/2, scen.offset().top + scen.height()/2);
    ctx.lineTo(tag.offset().left + tag.width()/2, tag.offset().top + tag.height()/2);
    ctx.strokeStyle = tag.css('background-color');
    ctx.stroke();
  }

  // function for calculating the distance of a point from a line with an equation of y = m*x + b
  function distance_of_point_from_line(x, y, m, b) {
    // find the m and b for the line perpendicular that contains the mouse pointer
    var m2 = -1/m;
    var b2 = y - m2 * x;

    // find intersection of the real line and the perpendicular line
    var yi = (b*m2 - b2*m)/(m2-m);
    var xi = (y-b)/m;
    
    // find the distance from the intersection and the mouse pointer
    return Math.sqrt(Math.pow( (xi-x), 2 ) + Math.pow( (yi-y), 2 ) );
  }

  function colinear(start, end, point, error)  {
    // find m and b of the line for y=mx+b
    var m = (start.y - end.y)/(start.x - end.x);
    var b = end.y - m * end.x;
    
    var distance = distance_of_point_from_line(point.x, point.y, m, b);
    
    //get crossproduct
    val =  ((end.x - start.x) * (point.y - start.y)) - ((point.x - start.x) * (end.y - start.y))
    if(Math.abs(val) <= error)  {
      return true;
    }
    if (distance < 10) { return true; }
    return false;
  }

  function inside_bounding_box(start, end, point, error)  {
    //if abs is slow, negate end and add the or
    if((
        (start.x + error >= point.x && point.x >= end.x - error) 
        || (end.x + error >= point.x && point.x >= start.x - error)
      ) && (
        (start.y + error >= point.y && point.y >= end.y - error) 
        || (end.y + error >= point.y && point.y >= start.y - error)
      ))  {
      return true;
    }
    return false;
  }

  $('#canvas').click(function(e)  {
    window.r = e;
    click = { x: e.layerX, y: e.layerY };

    //deactivate the Portal Themed tagging system
    $('.scenario_portal').css('display', 'none');

    // delete the lines that are within 3 pixels of the cursor
    $.each(connections, function(index, value)  {
      if (typeof(value) == 'undefined') { return; }
      f = $(value.from);
      t = $(value.to);
      from = { x: f.offset().left + f.width()/2, y: f.offset().top + f.height()/2 };
      to = { x: t.offset().left + t.width()/2, y: t.offset().top + t.height()/2 };
      allowable_error = 3; //3 pixels
      if( inside_bounding_box(from, to, click, allowable_error))  {
        if(colinear(from, to, click, allowable_error))  {
          scen_id = value.from.replace('#scenario_', '');
          tag_id = value.to.replace('#tag_', '');
    
          $.post('/scenarios/untag/' + scen_id + '/' + tag_id + '.json', '_method=put', function(d,t) {
            connections.splice(index,1);
            update_canvas();
          });
        }
      }
    });
  });

  function update_canvas() {
    canvas.width = canvas.width;
    //#{@scenarios.collect { |scenario| scenario.tags.collect { |tag| "connect($('#scenario_" + scenario.id.to_s + "'), $('#tag_" + tag.id.to_s + "'));" } } }
    for (var i=0; i<connections.length; i++) { 
      if (typeof(connections[i]) != 'undefined' && typeof(connections[i].from) != 'undefined' && typeof(connections[i].to) != 'undefined') {
        connect(connections[i].from, connections[i].to);
      }
    }
  }
  update_canvas();

  function randomize() { 
    $('.scenario_object, .tag_object').each(function() { 
      $(this).css('left', Math.random()*1024); $(this).css('top', Math.random()*768); 
      save_position($(this));
    });
    update_canvas();
    return false;
  }
  
  function save_position(element) {
    var url = '', post_data = '', type = '', id = ''

    // determine which type of element we are dragging
    type = element.attr('class').match(/([^ ]+)_object/)[1];

    id = element.attr('id').replace(type+'_', '');
      
    url = '/' + type + 's/' + id + '.json';
    post_data = "_method=put" +
                "&" + type + "[left]=" + element.offset().left +
                "&" + type + "[top]=" + element.offset().top;

    $.post(url, post_data, function(d,t){
      update_canvas();
    });
  }

  $('#randomize').click(randomize);


  function set_info_bar_content(item) {
    $('.scenario_info .steps').html($(item).find('.steps').html());
    $('.scenario_info .tags').html($(item).find('.tags').html());
  }

  //sets z index high when dragging, and below a click when done dragging
  $('.scenario_object, .tag_object').draggable({
    start: function(e,ui) { set_info_bar_content(this); },
    drag: function(e,ui) { update_canvas(); $(this).css('z-index', 1000)},
    stop: function(e, ui) { 
      save_position(ui.helper);
      $(this).css('z-index', 499);
   }
  });

  //sets to high z-index but lower than dragging index
  $('.scenario_object, .tag_object').click(function()  {
    $(this).css('z-index', 500);
    set_info_bar_content(this);
  });

  //hides the steps, show the step link
  $('.steps').click(function(){
    steps_link_div = $(this).attr('id') + '_link';
    $(this).css('display', 'none');
    $('#' + steps_link_div).css('display', 'block');
    update_canvas();
  });
  
  //hide the link, show the steps
  $('.steps_link').click(function(){
    steps_div = $(this).attr('id').replace('_link', '');
    $(this).css('display', 'none');
    $('#' + steps_div).css('display', 'block');
    update_canvas();
  });

  //click on the tag portal to active the scenario portal
  $('.tag_portal').click(function(){
    $('.scenario_portal').css('display', 'block');
    $('.scenario_portal_tag').html($(this).attr('id'));
  });

  //click on the scenario portal to make the connection
  $('.scenario_portal').click(function(){
    //get div information
    scen_div_id = $(this).attr('id');
    tag_div_id = $('#' + scen_div_id.replace('scenario_portal_', 'scenario_portal_tag_')).html();
    //alert("now you are thinking with portals: " + scen_div_id  + " and " + tag_div_id);
    scen_id = scen_div_id.replace('scenario_portal_', '');
    tag_id = tag_div_id.replace('tag_portal_', '');
      
    //setup post request
    url = '/scenarios/tag/' + scen_id + '/' + tag_id + '.json'
    post_data = "_method=put";

    $.post(url, post_data, function(d,t){
      //update the connections
      //probably another post call
      connections.push({ from: $("#scenario_" + scen_id), to: $("#tag_" + tag_id) });
      update_canvas();
    });
    $('.scenario_portal_tag').html('none');
    $('.scenario_portal').css('display', 'none');

  });
  
  $('delete_scenario_link').click(function() {
    $.post(this.href, '_method=delete', function(d,t) {
      window.location.reload(true);
    });
    this.href="#";
    return false;
  });

